// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  contentRepository: (where?: ContentRepositoryWhereInput) => Promise<boolean>;
  dependency: (where?: DependencyWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  zeitProject: (where?: ZeitProjectWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contentRepository: (
    where: ContentRepositoryWhereUniqueInput
  ) => ContentRepositoryPromise;
  contentRepositories: (
    args?: {
      where?: ContentRepositoryWhereInput;
      orderBy?: ContentRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ContentRepository>;
  contentRepositoriesConnection: (
    args?: {
      where?: ContentRepositoryWhereInput;
      orderBy?: ContentRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ContentRepositoryConnectionPromise;
  dependency: (where: DependencyWhereUniqueInput) => DependencyPromise;
  dependencies: (
    args?: {
      where?: DependencyWhereInput;
      orderBy?: DependencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Dependency>;
  dependenciesConnection: (
    args?: {
      where?: DependencyWhereInput;
      orderBy?: DependencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DependencyConnectionPromise;
  file: (where: FileWhereUniqueInput) => FilePromise;
  files: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<File>;
  filesConnection: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  zeitProject: (where: ZeitProjectWhereUniqueInput) => ZeitProjectPromise;
  zeitProjects: (
    args?: {
      where?: ZeitProjectWhereInput;
      orderBy?: ZeitProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ZeitProject>;
  zeitProjectsConnection: (
    args?: {
      where?: ZeitProjectWhereInput;
      orderBy?: ZeitProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ZeitProjectConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContentRepository: (
    data: ContentRepositoryCreateInput
  ) => ContentRepositoryPromise;
  updateContentRepository: (
    args: {
      data: ContentRepositoryUpdateInput;
      where: ContentRepositoryWhereUniqueInput;
    }
  ) => ContentRepositoryPromise;
  updateManyContentRepositories: (
    args: {
      data: ContentRepositoryUpdateManyMutationInput;
      where?: ContentRepositoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertContentRepository: (
    args: {
      where: ContentRepositoryWhereUniqueInput;
      create: ContentRepositoryCreateInput;
      update: ContentRepositoryUpdateInput;
    }
  ) => ContentRepositoryPromise;
  deleteContentRepository: (
    where: ContentRepositoryWhereUniqueInput
  ) => ContentRepositoryPromise;
  deleteManyContentRepositories: (
    where?: ContentRepositoryWhereInput
  ) => BatchPayloadPromise;
  createDependency: (data: DependencyCreateInput) => DependencyPromise;
  updateDependency: (
    args: { data: DependencyUpdateInput; where: DependencyWhereUniqueInput }
  ) => DependencyPromise;
  updateManyDependencies: (
    args: {
      data: DependencyUpdateManyMutationInput;
      where?: DependencyWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDependency: (
    args: {
      where: DependencyWhereUniqueInput;
      create: DependencyCreateInput;
      update: DependencyUpdateInput;
    }
  ) => DependencyPromise;
  deleteDependency: (where: DependencyWhereUniqueInput) => DependencyPromise;
  deleteManyDependencies: (where?: DependencyWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (
    args: { data: FileUpdateInput; where: FileWhereUniqueInput }
  ) => FilePromise;
  updateManyFiles: (
    args: { data: FileUpdateManyMutationInput; where?: FileWhereInput }
  ) => BatchPayloadPromise;
  upsertFile: (
    args: {
      where: FileWhereUniqueInput;
      create: FileCreateInput;
      update: FileUpdateInput;
    }
  ) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createZeitProject: (data: ZeitProjectCreateInput) => ZeitProjectPromise;
  updateZeitProject: (
    args: { data: ZeitProjectUpdateInput; where: ZeitProjectWhereUniqueInput }
  ) => ZeitProjectPromise;
  updateManyZeitProjects: (
    args: {
      data: ZeitProjectUpdateManyMutationInput;
      where?: ZeitProjectWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertZeitProject: (
    args: {
      where: ZeitProjectWhereUniqueInput;
      create: ZeitProjectCreateInput;
      update: ZeitProjectUpdateInput;
    }
  ) => ZeitProjectPromise;
  deleteZeitProject: (where: ZeitProjectWhereUniqueInput) => ZeitProjectPromise;
  deleteManyZeitProjects: (
    where?: ZeitProjectWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contentRepository: (
    where?: ContentRepositorySubscriptionWhereInput
  ) => ContentRepositorySubscriptionPayloadSubscription;
  dependency: (
    where?: DependencySubscriptionWhereInput
  ) => DependencySubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  zeitProject: (
    where?: ZeitProjectSubscriptionWhereInput
  ) => ZeitProjectSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "name_ASC"
  | "name_DESC"
  | "content_ASC"
  | "content_DESC"
  | "parent_ASC"
  | "parent_DESC"
  | "isDirectory_ASC"
  | "isDirectory_DESC";

export type ContentRepositoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type DependencyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "verison_ASC"
  | "verison_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "zeitToken_ASC"
  | "zeitToken_DESC"
  | "apiToken_ASC"
  | "apiToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ZeitProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "projectId_ASC"
  | "projectId_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContentRepositoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  parent?: String;
  parent_not?: String;
  parent_in?: String[] | String;
  parent_not_in?: String[] | String;
  parent_lt?: String;
  parent_lte?: String;
  parent_gt?: String;
  parent_gte?: String;
  parent_contains?: String;
  parent_not_contains?: String;
  parent_starts_with?: String;
  parent_not_starts_with?: String;
  parent_ends_with?: String;
  parent_not_ends_with?: String;
  repository?: ContentRepositoryWhereInput;
  author?: UserWhereInput;
  isDirectory?: Boolean;
  isDirectory_not?: Boolean;
  AND?: FileWhereInput[] | FileWhereInput;
  OR?: FileWhereInput[] | FileWhereInput;
  NOT?: FileWhereInput[] | FileWhereInput;
}

export interface ContentRepositoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  files_every?: FileWhereInput;
  files_some?: FileWhereInput;
  files_none?: FileWhereInput;
  author?: UserWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  dependencies_every?: DependencyWhereInput;
  dependencies_some?: DependencyWhereInput;
  dependencies_none?: DependencyWhereInput;
  zeitProject?: ZeitProjectWhereInput;
  AND?: ContentRepositoryWhereInput[] | ContentRepositoryWhereInput;
  OR?: ContentRepositoryWhereInput[] | ContentRepositoryWhereInput;
  NOT?: ContentRepositoryWhereInput[] | ContentRepositoryWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  zeitToken?: String;
  zeitToken_not?: String;
  zeitToken_in?: String[] | String;
  zeitToken_not_in?: String[] | String;
  zeitToken_lt?: String;
  zeitToken_lte?: String;
  zeitToken_gt?: String;
  zeitToken_gte?: String;
  zeitToken_contains?: String;
  zeitToken_not_contains?: String;
  zeitToken_starts_with?: String;
  zeitToken_not_starts_with?: String;
  zeitToken_ends_with?: String;
  zeitToken_not_ends_with?: String;
  repositories_every?: ContentRepositoryWhereInput;
  repositories_some?: ContentRepositoryWhereInput;
  repositories_none?: ContentRepositoryWhereInput;
  apiToken?: String;
  apiToken_not?: String;
  apiToken_in?: String[] | String;
  apiToken_not_in?: String[] | String;
  apiToken_lt?: String;
  apiToken_lte?: String;
  apiToken_gt?: String;
  apiToken_gte?: String;
  apiToken_contains?: String;
  apiToken_not_contains?: String;
  apiToken_starts_with?: String;
  apiToken_not_starts_with?: String;
  apiToken_ends_with?: String;
  apiToken_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DependencyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  verison?: String;
  verison_not?: String;
  verison_in?: String[] | String;
  verison_not_in?: String[] | String;
  verison_lt?: String;
  verison_lte?: String;
  verison_gt?: String;
  verison_gte?: String;
  verison_contains?: String;
  verison_not_contains?: String;
  verison_starts_with?: String;
  verison_not_starts_with?: String;
  verison_ends_with?: String;
  verison_not_ends_with?: String;
  AND?: DependencyWhereInput[] | DependencyWhereInput;
  OR?: DependencyWhereInput[] | DependencyWhereInput;
  NOT?: DependencyWhereInput[] | DependencyWhereInput;
}

export interface ZeitProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  projectId?: String;
  projectId_not?: String;
  projectId_in?: String[] | String;
  projectId_not_in?: String[] | String;
  projectId_lt?: String;
  projectId_lte?: String;
  projectId_gt?: String;
  projectId_gte?: String;
  projectId_contains?: String;
  projectId_not_contains?: String;
  projectId_starts_with?: String;
  projectId_not_starts_with?: String;
  projectId_ends_with?: String;
  projectId_not_ends_with?: String;
  repository?: ContentRepositoryWhereInput;
  AND?: ZeitProjectWhereInput[] | ZeitProjectWhereInput;
  OR?: ZeitProjectWhereInput[] | ZeitProjectWhereInput;
  NOT?: ZeitProjectWhereInput[] | ZeitProjectWhereInput;
}

export type DependencyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  apiToken?: String;
}>;

export type ZeitProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  projectId?: String;
}>;

export interface ContentRepositoryCreateInput {
  files?: FileCreateManyWithoutRepositoryInput;
  author: UserCreateOneWithoutRepositoriesInput;
  name?: String;
  dependencies?: DependencyCreateManyInput;
  zeitProject?: ZeitProjectCreateOneWithoutRepositoryInput;
}

export interface FileCreateManyWithoutRepositoryInput {
  create?:
    | FileCreateWithoutRepositoryInput[]
    | FileCreateWithoutRepositoryInput;
  connect?: FileWhereUniqueInput[] | FileWhereUniqueInput;
}

export interface FileCreateWithoutRepositoryInput {
  published?: Boolean;
  name: String;
  content: String;
  parent?: String;
  children?: FileCreatechildrenInput;
  author: UserCreateOneInput;
  isDirectory?: Boolean;
}

export interface FileCreatechildrenInput {
  set?: String[] | String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  zeitToken?: String;
  repositories?: ContentRepositoryCreateManyWithoutAuthorInput;
  apiToken: String;
}

export interface ContentRepositoryCreateManyWithoutAuthorInput {
  create?:
    | ContentRepositoryCreateWithoutAuthorInput[]
    | ContentRepositoryCreateWithoutAuthorInput;
  connect?:
    | ContentRepositoryWhereUniqueInput[]
    | ContentRepositoryWhereUniqueInput;
}

export interface ContentRepositoryCreateWithoutAuthorInput {
  files?: FileCreateManyWithoutRepositoryInput;
  name?: String;
  dependencies?: DependencyCreateManyInput;
  zeitProject?: ZeitProjectCreateOneWithoutRepositoryInput;
}

export interface DependencyCreateManyInput {
  create?: DependencyCreateInput[] | DependencyCreateInput;
  connect?: DependencyWhereUniqueInput[] | DependencyWhereUniqueInput;
}

export interface DependencyCreateInput {
  name: String;
  verison: String;
}

export interface ZeitProjectCreateOneWithoutRepositoryInput {
  create?: ZeitProjectCreateWithoutRepositoryInput;
  connect?: ZeitProjectWhereUniqueInput;
}

export interface ZeitProjectCreateWithoutRepositoryInput {
  name: String;
  projectId: String;
}

export interface UserCreateOneWithoutRepositoriesInput {
  create?: UserCreateWithoutRepositoriesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutRepositoriesInput {
  email: String;
  zeitToken?: String;
  apiToken: String;
}

export interface ContentRepositoryUpdateInput {
  files?: FileUpdateManyWithoutRepositoryInput;
  author?: UserUpdateOneRequiredWithoutRepositoriesInput;
  name?: String;
  dependencies?: DependencyUpdateManyInput;
  zeitProject?: ZeitProjectUpdateOneWithoutRepositoryInput;
}

export interface FileUpdateManyWithoutRepositoryInput {
  create?:
    | FileCreateWithoutRepositoryInput[]
    | FileCreateWithoutRepositoryInput;
  delete?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  connect?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  set?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  disconnect?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  update?:
    | FileUpdateWithWhereUniqueWithoutRepositoryInput[]
    | FileUpdateWithWhereUniqueWithoutRepositoryInput;
  upsert?:
    | FileUpsertWithWhereUniqueWithoutRepositoryInput[]
    | FileUpsertWithWhereUniqueWithoutRepositoryInput;
  deleteMany?: FileScalarWhereInput[] | FileScalarWhereInput;
  updateMany?:
    | FileUpdateManyWithWhereNestedInput[]
    | FileUpdateManyWithWhereNestedInput;
}

export interface FileUpdateWithWhereUniqueWithoutRepositoryInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutRepositoryDataInput;
}

export interface FileUpdateWithoutRepositoryDataInput {
  published?: Boolean;
  name?: String;
  content?: String;
  parent?: String;
  children?: FileUpdatechildrenInput;
  author?: UserUpdateOneRequiredInput;
  isDirectory?: Boolean;
}

export interface FileUpdatechildrenInput {
  set?: String[] | String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  email?: String;
  zeitToken?: String;
  repositories?: ContentRepositoryUpdateManyWithoutAuthorInput;
  apiToken?: String;
}

export interface ContentRepositoryUpdateManyWithoutAuthorInput {
  create?:
    | ContentRepositoryCreateWithoutAuthorInput[]
    | ContentRepositoryCreateWithoutAuthorInput;
  delete?:
    | ContentRepositoryWhereUniqueInput[]
    | ContentRepositoryWhereUniqueInput;
  connect?:
    | ContentRepositoryWhereUniqueInput[]
    | ContentRepositoryWhereUniqueInput;
  set?: ContentRepositoryWhereUniqueInput[] | ContentRepositoryWhereUniqueInput;
  disconnect?:
    | ContentRepositoryWhereUniqueInput[]
    | ContentRepositoryWhereUniqueInput;
  update?:
    | ContentRepositoryUpdateWithWhereUniqueWithoutAuthorInput[]
    | ContentRepositoryUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | ContentRepositoryUpsertWithWhereUniqueWithoutAuthorInput[]
    | ContentRepositoryUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?:
    | ContentRepositoryScalarWhereInput[]
    | ContentRepositoryScalarWhereInput;
  updateMany?:
    | ContentRepositoryUpdateManyWithWhereNestedInput[]
    | ContentRepositoryUpdateManyWithWhereNestedInput;
}

export interface ContentRepositoryUpdateWithWhereUniqueWithoutAuthorInput {
  where: ContentRepositoryWhereUniqueInput;
  data: ContentRepositoryUpdateWithoutAuthorDataInput;
}

export interface ContentRepositoryUpdateWithoutAuthorDataInput {
  files?: FileUpdateManyWithoutRepositoryInput;
  name?: String;
  dependencies?: DependencyUpdateManyInput;
  zeitProject?: ZeitProjectUpdateOneWithoutRepositoryInput;
}

export interface DependencyUpdateManyInput {
  create?: DependencyCreateInput[] | DependencyCreateInput;
  update?:
    | DependencyUpdateWithWhereUniqueNestedInput[]
    | DependencyUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DependencyUpsertWithWhereUniqueNestedInput[]
    | DependencyUpsertWithWhereUniqueNestedInput;
  delete?: DependencyWhereUniqueInput[] | DependencyWhereUniqueInput;
  connect?: DependencyWhereUniqueInput[] | DependencyWhereUniqueInput;
  set?: DependencyWhereUniqueInput[] | DependencyWhereUniqueInput;
  disconnect?: DependencyWhereUniqueInput[] | DependencyWhereUniqueInput;
  deleteMany?: DependencyScalarWhereInput[] | DependencyScalarWhereInput;
  updateMany?:
    | DependencyUpdateManyWithWhereNestedInput[]
    | DependencyUpdateManyWithWhereNestedInput;
}

export interface DependencyUpdateWithWhereUniqueNestedInput {
  where: DependencyWhereUniqueInput;
  data: DependencyUpdateDataInput;
}

export interface DependencyUpdateDataInput {
  name?: String;
  verison?: String;
}

export interface DependencyUpsertWithWhereUniqueNestedInput {
  where: DependencyWhereUniqueInput;
  update: DependencyUpdateDataInput;
  create: DependencyCreateInput;
}

export interface DependencyScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  verison?: String;
  verison_not?: String;
  verison_in?: String[] | String;
  verison_not_in?: String[] | String;
  verison_lt?: String;
  verison_lte?: String;
  verison_gt?: String;
  verison_gte?: String;
  verison_contains?: String;
  verison_not_contains?: String;
  verison_starts_with?: String;
  verison_not_starts_with?: String;
  verison_ends_with?: String;
  verison_not_ends_with?: String;
  AND?: DependencyScalarWhereInput[] | DependencyScalarWhereInput;
  OR?: DependencyScalarWhereInput[] | DependencyScalarWhereInput;
  NOT?: DependencyScalarWhereInput[] | DependencyScalarWhereInput;
}

export interface DependencyUpdateManyWithWhereNestedInput {
  where: DependencyScalarWhereInput;
  data: DependencyUpdateManyDataInput;
}

export interface DependencyUpdateManyDataInput {
  name?: String;
  verison?: String;
}

export interface ZeitProjectUpdateOneWithoutRepositoryInput {
  create?: ZeitProjectCreateWithoutRepositoryInput;
  update?: ZeitProjectUpdateWithoutRepositoryDataInput;
  upsert?: ZeitProjectUpsertWithoutRepositoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ZeitProjectWhereUniqueInput;
}

export interface ZeitProjectUpdateWithoutRepositoryDataInput {
  name?: String;
  projectId?: String;
}

export interface ZeitProjectUpsertWithoutRepositoryInput {
  update: ZeitProjectUpdateWithoutRepositoryDataInput;
  create: ZeitProjectCreateWithoutRepositoryInput;
}

export interface ContentRepositoryUpsertWithWhereUniqueWithoutAuthorInput {
  where: ContentRepositoryWhereUniqueInput;
  update: ContentRepositoryUpdateWithoutAuthorDataInput;
  create: ContentRepositoryCreateWithoutAuthorInput;
}

export interface ContentRepositoryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ContentRepositoryScalarWhereInput[] | ContentRepositoryScalarWhereInput;
  OR?: ContentRepositoryScalarWhereInput[] | ContentRepositoryScalarWhereInput;
  NOT?: ContentRepositoryScalarWhereInput[] | ContentRepositoryScalarWhereInput;
}

export interface ContentRepositoryUpdateManyWithWhereNestedInput {
  where: ContentRepositoryScalarWhereInput;
  data: ContentRepositoryUpdateManyDataInput;
}

export interface ContentRepositoryUpdateManyDataInput {
  name?: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface FileUpsertWithWhereUniqueWithoutRepositoryInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutRepositoryDataInput;
  create: FileCreateWithoutRepositoryInput;
}

export interface FileScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  parent?: String;
  parent_not?: String;
  parent_in?: String[] | String;
  parent_not_in?: String[] | String;
  parent_lt?: String;
  parent_lte?: String;
  parent_gt?: String;
  parent_gte?: String;
  parent_contains?: String;
  parent_not_contains?: String;
  parent_starts_with?: String;
  parent_not_starts_with?: String;
  parent_ends_with?: String;
  parent_not_ends_with?: String;
  isDirectory?: Boolean;
  isDirectory_not?: Boolean;
  AND?: FileScalarWhereInput[] | FileScalarWhereInput;
  OR?: FileScalarWhereInput[] | FileScalarWhereInput;
  NOT?: FileScalarWhereInput[] | FileScalarWhereInput;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileUpdateManyDataInput {
  published?: Boolean;
  name?: String;
  content?: String;
  parent?: String;
  children?: FileUpdatechildrenInput;
  isDirectory?: Boolean;
}

export interface UserUpdateOneRequiredWithoutRepositoriesInput {
  create?: UserCreateWithoutRepositoriesInput;
  update?: UserUpdateWithoutRepositoriesDataInput;
  upsert?: UserUpsertWithoutRepositoriesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutRepositoriesDataInput {
  email?: String;
  zeitToken?: String;
  apiToken?: String;
}

export interface UserUpsertWithoutRepositoriesInput {
  update: UserUpdateWithoutRepositoriesDataInput;
  create: UserCreateWithoutRepositoriesInput;
}

export interface ContentRepositoryUpdateManyMutationInput {
  name?: String;
}

export interface DependencyUpdateInput {
  name?: String;
  verison?: String;
}

export interface DependencyUpdateManyMutationInput {
  name?: String;
  verison?: String;
}

export interface FileCreateInput {
  published?: Boolean;
  name: String;
  content: String;
  parent?: String;
  children?: FileCreatechildrenInput;
  repository: ContentRepositoryCreateOneWithoutFilesInput;
  author: UserCreateOneInput;
  isDirectory?: Boolean;
}

export interface ContentRepositoryCreateOneWithoutFilesInput {
  create?: ContentRepositoryCreateWithoutFilesInput;
  connect?: ContentRepositoryWhereUniqueInput;
}

export interface ContentRepositoryCreateWithoutFilesInput {
  author: UserCreateOneWithoutRepositoriesInput;
  name?: String;
  dependencies?: DependencyCreateManyInput;
  zeitProject?: ZeitProjectCreateOneWithoutRepositoryInput;
}

export interface FileUpdateInput {
  published?: Boolean;
  name?: String;
  content?: String;
  parent?: String;
  children?: FileUpdatechildrenInput;
  repository?: ContentRepositoryUpdateOneRequiredWithoutFilesInput;
  author?: UserUpdateOneRequiredInput;
  isDirectory?: Boolean;
}

export interface ContentRepositoryUpdateOneRequiredWithoutFilesInput {
  create?: ContentRepositoryCreateWithoutFilesInput;
  update?: ContentRepositoryUpdateWithoutFilesDataInput;
  upsert?: ContentRepositoryUpsertWithoutFilesInput;
  connect?: ContentRepositoryWhereUniqueInput;
}

export interface ContentRepositoryUpdateWithoutFilesDataInput {
  author?: UserUpdateOneRequiredWithoutRepositoriesInput;
  name?: String;
  dependencies?: DependencyUpdateManyInput;
  zeitProject?: ZeitProjectUpdateOneWithoutRepositoryInput;
}

export interface ContentRepositoryUpsertWithoutFilesInput {
  update: ContentRepositoryUpdateWithoutFilesDataInput;
  create: ContentRepositoryCreateWithoutFilesInput;
}

export interface FileUpdateManyMutationInput {
  published?: Boolean;
  name?: String;
  content?: String;
  parent?: String;
  children?: FileUpdatechildrenInput;
  isDirectory?: Boolean;
}

export interface UserUpdateInput {
  email?: String;
  zeitToken?: String;
  repositories?: ContentRepositoryUpdateManyWithoutAuthorInput;
  apiToken?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  zeitToken?: String;
  apiToken?: String;
}

export interface ZeitProjectCreateInput {
  name: String;
  projectId: String;
  repository: ContentRepositoryCreateOneWithoutZeitProjectInput;
}

export interface ContentRepositoryCreateOneWithoutZeitProjectInput {
  create?: ContentRepositoryCreateWithoutZeitProjectInput;
  connect?: ContentRepositoryWhereUniqueInput;
}

export interface ContentRepositoryCreateWithoutZeitProjectInput {
  files?: FileCreateManyWithoutRepositoryInput;
  author: UserCreateOneWithoutRepositoriesInput;
  name?: String;
  dependencies?: DependencyCreateManyInput;
}

export interface ZeitProjectUpdateInput {
  name?: String;
  projectId?: String;
  repository?: ContentRepositoryUpdateOneRequiredWithoutZeitProjectInput;
}

export interface ContentRepositoryUpdateOneRequiredWithoutZeitProjectInput {
  create?: ContentRepositoryCreateWithoutZeitProjectInput;
  update?: ContentRepositoryUpdateWithoutZeitProjectDataInput;
  upsert?: ContentRepositoryUpsertWithoutZeitProjectInput;
  connect?: ContentRepositoryWhereUniqueInput;
}

export interface ContentRepositoryUpdateWithoutZeitProjectDataInput {
  files?: FileUpdateManyWithoutRepositoryInput;
  author?: UserUpdateOneRequiredWithoutRepositoriesInput;
  name?: String;
  dependencies?: DependencyUpdateManyInput;
}

export interface ContentRepositoryUpsertWithoutZeitProjectInput {
  update: ContentRepositoryUpdateWithoutZeitProjectDataInput;
  create: ContentRepositoryCreateWithoutZeitProjectInput;
}

export interface ZeitProjectUpdateManyMutationInput {
  name?: String;
  projectId?: String;
}

export interface ContentRepositorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ContentRepositoryWhereInput;
  AND?:
    | ContentRepositorySubscriptionWhereInput[]
    | ContentRepositorySubscriptionWhereInput;
  OR?:
    | ContentRepositorySubscriptionWhereInput[]
    | ContentRepositorySubscriptionWhereInput;
  NOT?:
    | ContentRepositorySubscriptionWhereInput[]
    | ContentRepositorySubscriptionWhereInput;
}

export interface DependencySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DependencyWhereInput;
  AND?: DependencySubscriptionWhereInput[] | DependencySubscriptionWhereInput;
  OR?: DependencySubscriptionWhereInput[] | DependencySubscriptionWhereInput;
  NOT?: DependencySubscriptionWhereInput[] | DependencySubscriptionWhereInput;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FileWhereInput;
  AND?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  OR?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  NOT?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ZeitProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ZeitProjectWhereInput;
  AND?: ZeitProjectSubscriptionWhereInput[] | ZeitProjectSubscriptionWhereInput;
  OR?: ZeitProjectSubscriptionWhereInput[] | ZeitProjectSubscriptionWhereInput;
  NOT?: ZeitProjectSubscriptionWhereInput[] | ZeitProjectSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ContentRepository {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ContentRepositoryPromise
  extends Promise<ContentRepository>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  files: <T = FragmentableArray<File>>(
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserPromise>() => T;
  name: () => Promise<String>;
  dependencies: <T = FragmentableArray<Dependency>>(
    args?: {
      where?: DependencyWhereInput;
      orderBy?: DependencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  zeitProject: <T = ZeitProjectPromise>() => T;
}

export interface ContentRepositorySubscription
  extends Promise<AsyncIterator<ContentRepository>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  dependencies: <T = Promise<AsyncIterator<DependencySubscription>>>(
    args?: {
      where?: DependencyWhereInput;
      orderBy?: DependencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  zeitProject: <T = ZeitProjectSubscription>() => T;
}

export interface File {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  name: String;
  content: String;
  parent?: String;
  children: String[];
  isDirectory: Boolean;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
  content: () => Promise<String>;
  parent: () => Promise<String>;
  children: () => Promise<String[]>;
  repository: <T = ContentRepositoryPromise>() => T;
  author: <T = UserPromise>() => T;
  isDirectory: () => Promise<Boolean>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<String>>;
  children: () => Promise<AsyncIterator<String[]>>;
  repository: <T = ContentRepositorySubscription>() => T;
  author: <T = UserSubscription>() => T;
  isDirectory: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: ID_Output;
  email: String;
  zeitToken?: String;
  apiToken: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  zeitToken: () => Promise<String>;
  repositories: <T = FragmentableArray<ContentRepository>>(
    args?: {
      where?: ContentRepositoryWhereInput;
      orderBy?: ContentRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  apiToken: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  zeitToken: () => Promise<AsyncIterator<String>>;
  repositories: <T = Promise<AsyncIterator<ContentRepositorySubscription>>>(
    args?: {
      where?: ContentRepositoryWhereInput;
      orderBy?: ContentRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  apiToken: () => Promise<AsyncIterator<String>>;
}

export interface Dependency {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  verison: String;
}

export interface DependencyPromise extends Promise<Dependency>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  verison: () => Promise<String>;
}

export interface DependencySubscription
  extends Promise<AsyncIterator<Dependency>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  verison: () => Promise<AsyncIterator<String>>;
}

export interface ZeitProject {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  projectId: String;
}

export interface ZeitProjectPromise extends Promise<ZeitProject>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  projectId: () => Promise<String>;
  repository: <T = ContentRepositoryPromise>() => T;
}

export interface ZeitProjectSubscription
  extends Promise<AsyncIterator<ZeitProject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  projectId: () => Promise<AsyncIterator<String>>;
  repository: <T = ContentRepositorySubscription>() => T;
}

export interface ContentRepositoryConnection {
  pageInfo: PageInfo;
  edges: ContentRepositoryEdge[];
}

export interface ContentRepositoryConnectionPromise
  extends Promise<ContentRepositoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentRepositoryEdge>>() => T;
  aggregate: <T = AggregateContentRepositoryPromise>() => T;
}

export interface ContentRepositoryConnectionSubscription
  extends Promise<AsyncIterator<ContentRepositoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentRepositoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentRepositorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContentRepositoryEdge {
  node: ContentRepository;
  cursor: String;
}

export interface ContentRepositoryEdgePromise
  extends Promise<ContentRepositoryEdge>,
    Fragmentable {
  node: <T = ContentRepositoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentRepositoryEdgeSubscription
  extends Promise<AsyncIterator<ContentRepositoryEdge>>,
    Fragmentable {
  node: <T = ContentRepositorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContentRepository {
  count: Int;
}

export interface AggregateContentRepositoryPromise
  extends Promise<AggregateContentRepository>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentRepositorySubscription
  extends Promise<AsyncIterator<AggregateContentRepository>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DependencyConnection {
  pageInfo: PageInfo;
  edges: DependencyEdge[];
}

export interface DependencyConnectionPromise
  extends Promise<DependencyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DependencyEdge>>() => T;
  aggregate: <T = AggregateDependencyPromise>() => T;
}

export interface DependencyConnectionSubscription
  extends Promise<AsyncIterator<DependencyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DependencyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDependencySubscription>() => T;
}

export interface DependencyEdge {
  node: Dependency;
  cursor: String;
}

export interface DependencyEdgePromise
  extends Promise<DependencyEdge>,
    Fragmentable {
  node: <T = DependencyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DependencyEdgeSubscription
  extends Promise<AsyncIterator<DependencyEdge>>,
    Fragmentable {
  node: <T = DependencySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDependency {
  count: Int;
}

export interface AggregateDependencyPromise
  extends Promise<AggregateDependency>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDependencySubscription
  extends Promise<AsyncIterator<AggregateDependency>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ZeitProjectConnection {
  pageInfo: PageInfo;
  edges: ZeitProjectEdge[];
}

export interface ZeitProjectConnectionPromise
  extends Promise<ZeitProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ZeitProjectEdge>>() => T;
  aggregate: <T = AggregateZeitProjectPromise>() => T;
}

export interface ZeitProjectConnectionSubscription
  extends Promise<AsyncIterator<ZeitProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ZeitProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateZeitProjectSubscription>() => T;
}

export interface ZeitProjectEdge {
  node: ZeitProject;
  cursor: String;
}

export interface ZeitProjectEdgePromise
  extends Promise<ZeitProjectEdge>,
    Fragmentable {
  node: <T = ZeitProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ZeitProjectEdgeSubscription
  extends Promise<AsyncIterator<ZeitProjectEdge>>,
    Fragmentable {
  node: <T = ZeitProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateZeitProject {
  count: Int;
}

export interface AggregateZeitProjectPromise
  extends Promise<AggregateZeitProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateZeitProjectSubscription
  extends Promise<AsyncIterator<AggregateZeitProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContentRepositorySubscriptionPayload {
  mutation: MutationType;
  node: ContentRepository;
  updatedFields: String[];
  previousValues: ContentRepositoryPreviousValues;
}

export interface ContentRepositorySubscriptionPayloadPromise
  extends Promise<ContentRepositorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentRepositoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentRepositoryPreviousValuesPromise>() => T;
}

export interface ContentRepositorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentRepositorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentRepositorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentRepositoryPreviousValuesSubscription>() => T;
}

export interface ContentRepositoryPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ContentRepositoryPreviousValuesPromise
  extends Promise<ContentRepositoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ContentRepositoryPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentRepositoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DependencySubscriptionPayload {
  mutation: MutationType;
  node: Dependency;
  updatedFields: String[];
  previousValues: DependencyPreviousValues;
}

export interface DependencySubscriptionPayloadPromise
  extends Promise<DependencySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DependencyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DependencyPreviousValuesPromise>() => T;
}

export interface DependencySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DependencySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DependencySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DependencyPreviousValuesSubscription>() => T;
}

export interface DependencyPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  verison: String;
}

export interface DependencyPreviousValuesPromise
  extends Promise<DependencyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  verison: () => Promise<String>;
}

export interface DependencyPreviousValuesSubscription
  extends Promise<AsyncIterator<DependencyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  verison: () => Promise<AsyncIterator<String>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  name: String;
  content: String;
  parent?: String;
  children: String[];
  isDirectory: Boolean;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
  content: () => Promise<String>;
  parent: () => Promise<String>;
  children: () => Promise<String[]>;
  isDirectory: () => Promise<Boolean>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<String>>;
  children: () => Promise<AsyncIterator<String[]>>;
  isDirectory: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  zeitToken?: String;
  apiToken: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  zeitToken: () => Promise<String>;
  apiToken: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  zeitToken: () => Promise<AsyncIterator<String>>;
  apiToken: () => Promise<AsyncIterator<String>>;
}

export interface ZeitProjectSubscriptionPayload {
  mutation: MutationType;
  node: ZeitProject;
  updatedFields: String[];
  previousValues: ZeitProjectPreviousValues;
}

export interface ZeitProjectSubscriptionPayloadPromise
  extends Promise<ZeitProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ZeitProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ZeitProjectPreviousValuesPromise>() => T;
}

export interface ZeitProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ZeitProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ZeitProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ZeitProjectPreviousValuesSubscription>() => T;
}

export interface ZeitProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  projectId: String;
}

export interface ZeitProjectPreviousValuesPromise
  extends Promise<ZeitProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  projectId: () => Promise<String>;
}

export interface ZeitProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ZeitProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  projectId: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "ContentRepository",
    embedded: false
  },
  {
    name: "ZeitProject",
    embedded: false
  },
  {
    name: "Dependency",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
