{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n\nvar sleep = function sleep(msec) {\n  return new _Promise(function (resolve) {\n    return setTimeout(resolve, msec);\n  });\n};\n\nvar getMDXData =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var mdx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sleep(1000);\n\n          case 2:\n            mdx = \"\\n# Hello, world!\\n \\n<Demo />\\n\";\n            return _context.abrupt(\"return\", mdx);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getMDXData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getMDXData;","map":{"version":3,"sources":["/Users/willbunting/Documents/GitHub/mdxcms/www/data/mdx.js"],"names":["sleep","msec","resolve","setTimeout","getMDXData","mdx"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,IAAI;AAAA,SAAI,aAAY,UAAAC,OAAO;AAAA,WAAIC,UAAU,CAACD,OAAD,EAAUD,IAAV,CAAd;AAAA,GAAnB,CAAJ;AAAA,CAAlB;;AAEA,IAAMG,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXJ,KAAK,CAAC,IAAD,CADM;;AAAA;AAGXK,YAAAA,GAHW;AAAA,6CASVA,GATU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVD,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAYA,eAAeA,UAAf","sourcesContent":["const sleep = msec => new Promise(resolve => setTimeout(resolve, msec));\n\nconst getMDXData = async () => {\n  await sleep(1000);\n\n  const mdx = `\n# Hello, world!\n \n<Demo />\n`\n\n  return mdx;\n}\n\nexport default getMDXData;"]},"metadata":{},"sourceType":"module"}