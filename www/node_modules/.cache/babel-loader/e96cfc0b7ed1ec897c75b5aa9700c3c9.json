{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/willbunting/Documents/GitHub/mdxcms/www/pages/blog.js\";\nimport getMDXData from \"../data/mdx\";\nimport React from \"react\";\nimport MDX from '@mdx-js/runtime'; // Provide custom components for markdown elements\n\nvar components = {\n  h1: function h1(props) {\n    return React.createElement(\"h1\", _extends({\n      style: {\n        color: 'tomato'\n      }\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }));\n  },\n  Demo: function Demo(props) {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, \"This is a demo component\");\n  } // Provide variables that might be referenced by JSX\n\n};\nvar scope = {\n  some: 'value'\n};\n\nvar useFocus = function useFocus() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onFocusEvent = function onFocusEvent(event) {\n    setState(true);\n  };\n\n  var onBlurEvent = function onBlurEvent(event) {\n    setState(false);\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"focus\", onFocusEvent);\n    window.addEventListener(\"blur\", onBlurEvent);\n    return function () {\n      window.removeEventListener(\"focus\", onFocusEvent);\n      window.removeEventListener(\"blur\", onBlurEvent);\n    };\n  });\n  return state;\n};\n\nvar Page = function Page(_ref) {\n  var mdxData = _ref.mdxData,\n      etag = _ref.etag;\n  var focused = useFocus();\n  useEffect(function () {\n    if (focused) {\n      fetch(window.location, {\n        headers: {\n          pragma: \"no-cache\"\n        }\n      }).then(function (res) {\n        if (res.ok && res.headers.get(\"x-version\") !== etag) {\n          window.location.reload();\n        }\n      });\n    }\n  }, [focused]);\n  return React.createElement(MDX, {\n    components: components,\n    scope: scope,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, mdxData);\n};\n\nPage.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var res, mdxData, etag;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            res = _ref2.res;\n            _context.next = 3;\n            return getMDXData();\n\n          case 3:\n            mdxData = _context.sent;\n            etag = require(\"crypto\").createHash(\"md5\").update(_JSON$stringify(mdxData)).digest(\"hex\");\n\n            if (res) {\n              res.setHeader(\"Cache-Control\", \"s-maxage=1, stale-while-revalidate\");\n              res.setHeader(\"X-version\", etag);\n            }\n\n            return _context.abrupt(\"return\", {\n              mdxData: mdxData,\n              etag: etag\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Page;","map":{"version":3,"sources":["/Users/willbunting/Documents/GitHub/mdxcms/www/pages/blog.js"],"names":["getMDXData","React","MDX","components","h1","props","color","Demo","scope","some","useFocus","useState","state","setState","onFocusEvent","event","onBlurEvent","useEffect","window","addEventListener","removeEventListener","Page","mdxData","etag","focused","fetch","location","headers","pragma","then","res","ok","get","reload","getInitialProps","require","createHash","update","digest","setHeader"],"mappings":"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","sourcesContent":["import getMDXData from \"../data/mdx\";\nimport React from \"react\";\nimport MDX from '@mdx-js/runtime'\n\n// Provide custom components for markdown elements\nconst components = {\n  h1: props => <h1 style={{ color: 'tomato' }} {...props} />,\n  Demo: props => <h1>This is a demo component</h1>\n}\n\n// Provide variables that might be referenced by JSX\nconst scope = {\n  some: 'value'\n}\n\nconst useFocus = () => {\n  const [state, setState] = useState(null);\n  const onFocusEvent = event => {\n    setState(true);\n  };\n  const onBlurEvent = event => {\n    setState(false);\n  };\n  useEffect(() => {\n    window.addEventListener(\"focus\", onFocusEvent);\n    window.addEventListener(\"blur\", onBlurEvent);\n    return () => {\n      window.removeEventListener(\"focus\", onFocusEvent);\n      window.removeEventListener(\"blur\", onBlurEvent);\n    };\n  });\n  return state;\n};\n\nconst Page = ({ mdxData, etag }) => {\n  const focused = useFocus();\n  useEffect(\n    () => {\n      if (focused) {\n        fetch(window.location, {\n          headers: {\n            pragma: \"no-cache\"\n          }\n        }).then(res => {\n          if (res.ok && res.headers.get(\"x-version\") !== etag) {\n            window.location.reload();\n          }\n        });\n      }\n    },\n    [focused]\n  );\n  \n  return <MDX components={components} scope={scope}>{mdxData}</MDX>\n}\n\nPage.getInitialProps = async ({ res }) => {\n  const mdxData = await getMDXData();\n  const etag = require(\"crypto\")\n    .createHash(\"md5\")\n    .update(JSON.stringify(mdxData))\n    .digest(\"hex\");\n\n  if (res) {\n    res.setHeader(\"Cache-Control\", \"s-maxage=1, stale-while-revalidate\");\n    res.setHeader(\"X-version\", etag);\n  }\n\n  return { mdxData, etag };\n};\n\nexport default Page"]},"metadata":{},"sourceType":"module"}